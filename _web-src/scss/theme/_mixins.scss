// Vue.js inspired mixins
@use "sass:color";
@use "variables" as *;

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{$breakpoint-sm - 1px}) { @content; }
  }
  @if $breakpoint == sm {
    @media (min-width: #{$breakpoint-sm}) { @content; }
  }
  @if $breakpoint == md {
    @media (min-width: #{$breakpoint-md}) { @content; }
  }
  @if $breakpoint == lg {
    @media (min-width: #{$breakpoint-lg}) { @content; }
  }
  @if $breakpoint == xl {
    @media (min-width: #{$breakpoint-xl}) { @content; }
  }
  @if $breakpoint == xxl {
    @media (min-width: #{$breakpoint-xxl}) { @content; }
  }
}

// Button styles
@mixin button-style($bg-color, $text-color: #fff, $hover-bg: color.adjust($bg-color, $lightness: -10%)) {
  background: $bg-color;
  color: $text-color;
  border: none;
  border-radius: $border-radius;
  padding: 0.75rem 1.5rem;
  font-weight: $font-weight-medium;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  transition: $transition-base;
  cursor: pointer;
  
  &:hover {
    background: $hover-bg;
    color: $text-color;
    text-decoration: none;
    transform: translateY(-2px);
    box-shadow: $shadow-md;
  }
  
  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba($bg-color, 0.3);
  }
}

// Card styles
@mixin card-style($padding: 2rem, $shadow: $shadow) {
  background: $background-color;
  border-radius: $border-radius-lg;
  padding: $padding;
  box-shadow: $shadow;
  transition: $transition-base;
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: $shadow-lg;
  }
}

// Gradient text
@mixin gradient-text($gradient: $hero-gradient) {
  background: $gradient;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

// Flex center
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Absolute center
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Truncate text
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Multi-line truncate
@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Smooth scroll
@mixin smooth-scroll {
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
}

// Hide scrollbar
@mixin hide-scrollbar {
  -ms-overflow-style: none;
  scrollbar-width: none;
  
  &::-webkit-scrollbar {
    display: none;
  }
}

// Glass effect
@mixin glass-effect($opacity: 0.1) {
  background: rgba(255, 255, 255, $opacity);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

// Animation keyframes
@mixin fade-in-up($duration: 0.6s, $delay: 0s) {
  opacity: 0;
  transform: translateY(30px);
  animation: fadeInUp $duration ease-out $delay forwards;
}

@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@mixin fade-in($duration: 0.6s, $delay: 0s) {
  opacity: 0;
  animation: fadeIn $duration ease-out $delay forwards;
}

@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

// Pulse animation
@mixin pulse($scale: 1.05) {
  animation: pulse 2s infinite;
  
  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale($scale);
    }
  }
}